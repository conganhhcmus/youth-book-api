name: Check, Build & Deployment

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
        types: [opened, synchronize, reopened, edited]

jobs:
    check:
        name: Check
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js 20.x
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
                  cache: yarn
            - name: Cache node_modules
              uses: actions/cache@v4
              id: yarn-cache
              with:
                path: ./node_modules

                key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-node_modules-
            - name: Install packages
              run: yarn install
            - name: Check coding conventions
              run: |
                yarn ts-check
                yarn prettier-check
                yarn cspell-check
            - if: github.event_name == 'push'
              run: echo "${{ github.event.head_commit.message }}" | yarn commitlint
            - if: github.event_name == 'pull_request'
              run: echo "${{ github.event.pull_request.title }}" | yarn commitlint

    # deploy-on-aws:
    #     name: Deploy AWS
    #     env:
    #       PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #       HOSTNAME: ${{secrets.SSH_HOST}}
    #       USER_NAME: ${{secrets.USER_NAME}}

    #     environment: Production
    #     if: github.ref == 'refs/heads/master'
    #     needs: [check]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Deploy to AWS
    #           run: |
    #             echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
    #             ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

    #                 # Now we have got the access of EC2 and we will start the deploy .
    #                 cd /home/ec2-user/youth-book-api &&
    #                 git checkout master &&
    #                 git fetch --all &&
    #                 git reset --hard origin/master &&
    #                 git pull origin master &&
    #                 yarn &&
    #                 yarn build &&
    #                 pm2 stop ./dist/app.js &&
    #                 pm2 start ./dist/app.js
    #             '

    build:
        name: Build
        needs: [check]
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - name: Use Node.js 20.x
            uses: actions/setup-node@v4
            with:
                node-version: 20.x
                cache: yarn
          - name: Cache node_modules
            uses: actions/cache@v4
            id: yarn-cache
            with:
                path: ./node_modules

                key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-node_modules-
          - name: Install packages
            run: yarn install
          - name: Build code
            run: yarn build
          - name: Upload build folder
            uses: actions/upload-artifact@v4
            with:
              name: build-folder
              path: ./dist
              overwrite: true
              retention-days: 7

    deploy-on-vercel:
        name: Deploy Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        environment: Production-BK
        if: github.ref == 'refs/heads/master'
        needs: [build]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js 20.x
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
                  cache: yarn
            - name: Download build folder
              uses: actions/download-artifact@v4
              with:
                name: build-folder
                path: ./dist
            - name: Install Vercel CLI
              run: yarn global add vercel@latest
            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=production --token=$VERCEL_TOKEN
            - name: Build Project Artifacts
              run: vercel build --prod --token=$VERCEL_TOKEN
            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
